# Gerekli kÃ¼tÃ¼phaneler
from sklearn.preprocessing import StandardScaler
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# CSV dosyasÄ±nÄ± okuma
df = pd.read_csv('churn/WA_Fn-UseC_-Telco-Customer-Churn.csv')

# 1. TotalCharges sÃ¼tununu sayÄ±ya Ã§evir (hatalarÄ± NaN yap)
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

# 2. Eksik satÄ±rlarÄ± sil (Ã¶zellikle TotalCharges iÃ§in)
df.dropna(inplace=True)

# 3. customerID sÃ¼tununu dÃ¼ÅŸÃ¼r
df.drop('customerID', axis=1, inplace=True)

# 4. Churn sÃ¼tununu 0/1'e Ã§evir
df['Churn'] = df['Churn'].map({'No': 0, 'Yes': 1})

# ğŸ“Œ Yeni Ã–zellik: TotalRevenue
df['TotalRevenue'] = df['MonthlyCharges'] * df['tenure']

# SayÄ±sal ve kategorik sÃ¼tunlarÄ± ayÄ±r
numerical_features = df.select_dtypes(include=['int64', 'float64']).columns.drop('Churn')
categorical_features = df.select_dtypes(include='object').columns

print("SayÄ±sal sÃ¼tunlar:", list(numerical_features))
print("Kategorik sÃ¼tunlar:", list(categorical_features))

# One-hot encoding
df_encoded = pd.get_dummies(df, columns=categorical_features, drop_first=True)
print("Yeni sÃ¼tun sayÄ±sÄ±:", df_encoded.shape[1])

# SayÄ±sal verileri standardize et
scaler = StandardScaler()
df_encoded[numerical_features] = scaler.fit_transform(df_encoded[numerical_features])

# Ã–zellikler ve hedef deÄŸiÅŸkeni ayÄ±r
X = df_encoded.drop('Churn', axis=1)
y = df_encoded['Churn']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Model (balanced & C=0.5)
log_model_balanced = LogisticRegression(class_weight='balanced', C=0.5, max_iter=1000)
log_model_balanced.fit(X_train, y_train)
y_pred_balanced = log_model_balanced.predict(X_test)

# SonuÃ§lar
print("Balanced Model - Accuracy:", accuracy_score(y_test, y_pred_balanced))
print("Balanced Model - Confusion Matrix:\n", confusion_matrix(y_test, y_pred_balanced))
print("Balanced Model - Classification Report:\n", classification_report(y_test, y_pred_balanced))

#Yorum
print("\nğŸ”¹ Accuracy (DoÄŸruluk):")
print("  Modelin tÃ¼m Ã¶rnekler iÃ§inde ne kadarÄ±nÄ± doÄŸru tahmin ettiÄŸini gÃ¶sterir.")
print("  Dengesiz veri setlerinde yanÄ±ltÄ±cÄ± olabilir.")

print("\nğŸ”¹ Precision (Kesinlik):")
print("  Modelin 'churn' dediÄŸi Ã¶rneklerin kaÃ§Ä± gerÃ§ekten churn?")
print("  Yani: DoÄŸru churn tahmini / TÃ¼m churn tahmini")
print("  YanlÄ±ÅŸ alarmlarÄ± azaltmak iÃ§in Ã¶nemlidir.")

print("\nğŸ”¹ Recall (DuyarlÄ±lÄ±k):")
print("  GerÃ§ekten churn eden mÃ¼ÅŸterilerin kaÃ§Ä± yakalandÄ±?")
print("  Yani: DoÄŸru churn tahmini / TÃ¼m gerÃ§ek churn")
print("  MÃ¼ÅŸteri kaybÄ±nÄ± Ã¶nlemede kritiktir.")

print("\nğŸ”¹ F1-Score:")
print("  Precision ve Recall'un dengeli ortalamasÄ±dÄ±r.")
print("  Dengesiz veri setlerinde model kalitesini daha iyi Ã¶zetler.")

print("\nğŸ”¹ Confusion Matrix:")
print("  TP: GerÃ§ek churn ve doÄŸru tahmin")
print("  FP: Churn deÄŸil ama churn diye tahmin")
print("  TN: GerÃ§ek churn deÄŸil ve doÄŸru tahmin")
print("  FN: GerÃ§ek churn ama kaÃ§Ä±rÄ±lmÄ±ÅŸ (yanlÄ±ÅŸ tahmin)")








